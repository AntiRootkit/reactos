***************
*** 57,62 ****
  	/* We have separate floating-point register content memory on the
  	   stack.  We use the __fpregs_mem block in the context.  Set the
  	   links up correctly.  */
  	leal	oFPREGSMEM(%eax), %ecx
  	movl	%ecx, oFPREGS(%eax)
  	/* Save the floating-point context.  */
--- 57,66 ----
  	/* We have separate floating-point register content memory on the
  	   stack.  We use the __fpregs_mem block in the context.  Set the
  	   links up correctly.  */
+         /* We use this for priveleged instructions and the kernel is already
+          * already conscious of using floating point registers.  Hence we
+          * disable fp use here */
+ #if 0
  	leal	oFPREGSMEM(%eax), %ecx
  	movl	%ecx, oFPREGS(%eax)
  	/* Save the floating-point context.  */
***************
*** 65,70 ****
  	   Intel thought this opcode to be used in interrupt handlers which
  	   would block all exceptions.  */
  	fldenv	(%ecx)
  
  	/* Save the current signal mask.  */
  	pushl	%ebx
--- 69,75 ----
  	   Intel thought this opcode to be used in interrupt handlers which
  	   would block all exceptions.  */
  	fldenv	(%ecx)
+ #endif
  
  	/* Save the current signal mask.  */
  	pushl	%ebx
***************
*** 104,113 ****
  	/* EAX was modified, reload it.  */
  	movl	4(%esp), %eax
  
  	/* Restore the floating-point context.  Not the registers, only the
  	   rest.  */
  	movl	oFPREGS(%eax), %ecx
  	fldenv	(%ecx)
  
  	/* Restore the FS segment register.  We don't touch the GS register
  	   since it is used for threads.  */
--- 109,121 ----
  	/* EAX was modified, reload it.  */
  	movl	4(%esp), %eax
  
+         /* @See above regarding floating point */
+ #if 0
  	/* Restore the floating-point context.  Not the registers, only the
  	   rest.  */
  	movl	oFPREGS(%eax), %ecx
  	fldenv	(%ecx)
+ #endif
  
  	/* Restore the FS segment register.  We don't touch the GS register
  	   since it is used for threads.  */

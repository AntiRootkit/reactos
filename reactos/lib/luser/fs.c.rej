***************
*** 5,14 ****
  #include <lunix.h>
  #include <lstorage.h>
  #include <unixmap.h>
  
  #define RING3 3
  #define USE_LDT 4
  
  struct GDTLookupResult {
      ULONG SegLimit, SegBase;
      PKGDTENTRY Entry;
--- 5,19 ----
  #include <lunix.h>
  #include <lstorage.h>
  #include <unixmap.h>
+ #include "luserint.h"
  
  #define RING3 3
  #define USE_LDT 4
  
+ HARDWARE_PTE MapGetFirstLevelPTEWithCR(ULONG_PTR CR, ULONG_PTR Addr);
+ HARDWARE_PTE MapGetFirstLevelPTE(ULONG_PTR Addr);
+ HARDWARE_PTE MapGetSecondLevelPTE(HARDWARE_PTE FirstLvlPte, ULONG_PTR Addr);
+ 
  struct GDTLookupResult {
      ULONG SegLimit, SegBase;
      PKGDTENTRY Entry;
***************
*** 16,32 ****
  
  void _memcpy(void *dst, void *src, int len);
  
- #define MEMFD 2
  void ReadLuserCPUData(struct LuserCPUData *data)
  {
-     unix_lseek(MEMFD, -sizeof(*data), 2);
-     unix_read(MEMFD, (char *)data, sizeof(*data));
  }
  
  void WriteLuserCPUData(struct LuserCPUData *data)
  {
-     unix_lseek(MEMFD, -sizeof(*data), 2);
-     unix_write(MEMFD, (char *)data, sizeof(*data));
  }
  
  BOOLEAN LookupGDT(struct LuserCPUData *CPU, struct GDTLookupResult *ResultEntry, int seg)
--- 21,42 ----
  
  void _memcpy(void *dst, void *src, int len);
  
+ #define MEMFD 100
+ #define CPUFD 101
  void ReadLuserCPUData(struct LuserCPUData *data)
  {
+     if (unix_lseek(CPUFD, 0, 0) == -1)
+         unix_abort();
+     if (unix_read(CPUFD, (char *)data, sizeof(*data)) != sizeof(*data))
+         unix_abort();
  }
  
  void WriteLuserCPUData(struct LuserCPUData *data)
  {
+     if (unix_lseek(CPUFD, 0, 0) == -1)
+         unix_abort();
+     if (unix_write(CPUFD, (char *)data, sizeof(*data)) != sizeof(*data))
+         unix_abort();
  }
  
  BOOLEAN LookupGDT(struct LuserCPUData *CPU, struct GDTLookupResult *ResultEntry, int seg)
***************
*** 52,120 ****
      return TRUE;
  }
  
- void LuserSetDS(int ds)
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     CPU.LuserDs = ds;
-     WriteLuserCPUData(&CPU);
- }
- 
- int LuserGetDS()
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     return CPU.LuserDs;
- }
- 
- void LuserSetES(int es)
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     CPU.LuserEs = es;
-     WriteLuserCPUData(&CPU);
- }
- 
- int LuserGetES()
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     return CPU.LuserEs;
- }
- 
- void LuserSetFS(int fs)
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     CPU.LuserFs = fs;
-     WriteLuserCPUData(&CPU);
-     __asm__
-         ("mov %0,%%eax\n"
-          "mov %%ax,%%fs\n" : : "b" (fs | USE_LDT | RING3) : "%eax");
- }
- 
- int LuserGetFS()
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     return CPU.LuserFs;
- }
- 
- void LuserSetSS(int ss)
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     CPU.LuserSs = ss;
-     WriteLuserCPUData(&CPU);
- }
- 
- int LuserGetSS()
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     return CPU.LuserSs;
- }
- 
  void LuserSetTR(int tr)
  {
      struct LuserCPUData CPU;
--- 62,67 ----
      return TRUE;
  }
  
  void LuserSetTR(int tr)
  {
      struct LuserCPUData CPU;
***************
*** 134,148 ****
  {
      int i, j;
      HARDWARE_PTE FirstLevelPTE, SecondLevelPTE;
  
-     for (i = 0; i < 512; i++)
      {
          int addr = i << 22;
  
          FirstLevelPTE = MapGetFirstLevelPTE(i << 22);
          if (!FirstLevelPTE.Valid)
          {
-             unix_munmap((PVOID)(i << 22), 1 << 22);
          }
          else
          {
--- 81,105 ----
  {
      int i, j;
      HARDWARE_PTE FirstLevelPTE, SecondLevelPTE;
+     HARDWARE_PTE OldFirstLevel; // OldSecondLevel;
  
+     for (i = 0; i < (0xbfdf0000 >> 22); i++)
      {
          int addr = i << 22;
  
          FirstLevelPTE = MapGetFirstLevelPTE(i << 22);
          if (!FirstLevelPTE.Valid)
          {
+ 	    OldFirstLevel = MapGetFirstLevelPTEWithCR(oldCR, i << 22);
+ 	    if (OldFirstLevel.Valid)
+ 	    {
+ 	    	for (j = 0; j < 1024; j++)
+ 	    	{
+                	    int thisAddr = addr | (j << 12);
+             	    unix_msync((PVOID)thisAddr, PAGE_SIZE, MS_SYNC);
+             	    unix_munmap((PVOID)thisAddr, PAGE_SIZE);
+ 		}
+ 	    }
          }
          else
          {
***************
*** 150,179 ****
              {
                  int thisAddr = addr | (j << 12);
                  SecondLevelPTE = MapGetSecondLevelPTE(FirstLevelPTE, j << 12);
                  if (!SecondLevelPTE.Valid)
                  {
                      unix_munmap((PVOID)thisAddr, 1 << 12);
                  }
                  else
                  {
-                     HARDWARE_PTE OldFirstLvlPTE, OldSecondLvlPTE;
-                     OldFirstLvlPTE = MapGetFirstLevelPTEWithCR(oldCR, thisAddr);
-                     // Not valid, unmap
-                     if (OldFirstLvlPTE.Valid)
-                     {
-                         OldSecondLvlPTE = 
-                             MapGetSecondLevelPTE(FirstLevelPTE, thisAddr);
-                         if (OldSecondLvlPTE.Valid)
-                         {
-                             // Map differs, clobber it
-                             if (OldSecondLvlPTE.PageFrameNumber != 
-                                 SecondLevelPTE.PageFrameNumber)
-                             {
-                                 unix_munmap((PVOID)thisAddr, 1 << 12);
-                             }
-                             // Map equal :-)
-                         }
-                     }
                  }
              }
          }
--- 107,130 ----
              {
                  int thisAddr = addr | (j << 12);
                  SecondLevelPTE = MapGetSecondLevelPTE(FirstLevelPTE, j << 12);
+                 unix_msync((PVOID)thisAddr, 1 << 12, MS_SYNC);
                  if (!SecondLevelPTE.Valid)
                  {
                      unix_munmap((PVOID)thisAddr, 1 << 12);
                  }
                  else
                  {
+                     ULONG_PTR mmap_res = unix_mmap
+                         ((PVOID)thisAddr,
+                          PAGE_SIZE,
+                          PROT_READ|PROT_WRITE|PROT_EXEC,
+                          MAP_SHARED|MAP_FIXED,
+                                  MEMFD,
+                          SecondLevelPTE.PageFrameNumber << PAGE_SHIFT);
+                     if (thisAddr < 0x80000000)
+                         Printf("Mapping page %x @ %x\n", SecondLevelPTE.PageFrameNumber, thisAddr);
+                     if (mmap_res == (ULONG_PTR)-1)
+                         unix_abort();
                  }
              }
          }
***************
*** 191,197 ****
      // Clobber 'TLB'
      if (cr == 3)
      {
-         Printf("Zapping CR: newCR %x\n", newCR);
          ZapTLB(oldCR, newCR);
      }
  }
--- 142,148 ----
      // Clobber 'TLB'
      if (cr == 3)
      {
+         //Printf("Zapping CR: newCR %x\n", newCR);
          ZapTLB(oldCR, newCR);
      }
  }
***************
*** 218,286 ****
      return CPU.LuserDr[dr];
  }
  
- void LuserWriteFSDword(int offset, unsigned long value)
  {
-     struct GDTLookupResult result;
      struct LuserCPUData CPU;
      ReadLuserCPUData(&CPU);
-     if (LookupGDT(&CPU, &result, CPU.LuserFs) && offset <= result.SegLimit - 4)
-         *((unsigned long *)(result.SegBase + offset)) = value;
- }
- 
- unsigned long LuserReadFSDword(int offset)
  {
-     struct GDTLookupResult result;
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     if (LookupGDT(&CPU, &result, CPU.LuserFs) && offset <= result.SegLimit - 4)
-         return *((unsigned long *)(result.SegBase + offset));
-     else return 0;
- }
  
- void LuserWriteFSWord(int offset, unsigned long value)
- {
-     struct GDTLookupResult result;
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     if (LookupGDT(&CPU, &result, CPU.LuserFs) && offset <= result.SegLimit - 4)
-         *((unsigned short *)(result.SegBase + offset)) = value;
- }
  
- unsigned long LuserReadFSWord(int offset)
- {
-     struct GDTLookupResult result;
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     if (LookupGDT(&CPU, &result, CPU.LuserFs) && offset <= result.SegLimit - 4)
-         return *((unsigned short *)(result.SegBase + offset));
-     else return 0;
  }
- 
- void LuserWriteFSByte(int offset, unsigned long value)
- {
-     struct GDTLookupResult result;
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     if (LookupGDT(&CPU, &result, CPU.LuserFs) && offset <= result.SegLimit - 4)
-         *((unsigned char *)(result.SegBase + offset)) = value;
- }
- 
- unsigned long LuserReadFSByte(int offset)
- {
-     struct GDTLookupResult result;
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     if (LookupGDT(&CPU, &result, CPU.LuserFs) && offset <= result.SegLimit - 4)
-         return *((unsigned char *)(result.SegBase + offset));
-     else return 0;
- }
- 
- void LuserSetGlobalDescriptorTable(void *newGdt)
- {
-     struct LuserCPUData CPU;
-     ReadLuserCPUData(&CPU);
-     memcpy(&CPU.LuserGdt.Limit, newGdt, sizeof(USHORT) + sizeof(ULONG));
-     WriteLuserCPUData(&CPU);
  }
  
  void LuserGetGlobalDescriptorTable(void *gdtSt)
--- 169,206 ----
      return CPU.LuserDr[dr];
  }
  
+ void LuserSetGlobalDescriptorTable(void *newGdt)
  {
+     int i;
      struct LuserCPUData CPU;
+     struct modify_ldt_ldt_s ldtmod;
+     KGDTENTRY *gdtent;
+     Printf("Loading new GDT from %x\n", newGdt);
      ReadLuserCPUData(&CPU);
+     memcpy(&CPU.LuserGdt.Limit, newGdt, sizeof(USHORT) + sizeof(ULONG));
+     WriteLuserCPUData(&CPU);
+     Printf("New GDT: %x:%x\n", CPU.LuserGdt.Base, CPU.LuserGdt.Limit);
+     for (i = 0; i < CPU.LuserGdt.Limit; i += 8)
  {
+         gdtent = (KGDTENTRY *)(CPU.LuserGdt.Base + i);
+         // Fill in ldt entry
+ 	ldtmod.entry_number = i / 8;
+ 	ldtmod.base_addr = gdtent->BaseLow | (gdtent->HighWord.Bytes.BaseMid << 16) | (gdtent->HighWord.Bytes.BaseHi << 24);
+ 	ldtmod.limit = gdtent->LimitLow | (gdtent->HighWord.Bits.LimitHi << 16);
+ 	ldtmod.limit_in_pages = gdtent->HighWord.Bits.Granularity;
+ 	ldtmod.contents = 0;
+ 	ldtmod.seg_32bit = gdtent->HighWord.Bits.Default_Big;
+ 	ldtmod.seg_not_present = !gdtent->HighWord.Bits.Pres;
+ 	ldtmod.useable = !ldtmod.seg_not_present;
+ 	ldtmod.read_exec_only = 0;
  
+ 	if (ldtmod.useable)
+ 	    Printf("LDT: [%x] -> %x:%x\n", ldtmod.entry_number, ldtmod.base_addr, ldtmod.limit * (ldtmod.limit_in_pages ? (1<<PAGE_SHIFT) : 1));
  
+         if (unix_write_ldt(&ldtmod, sizeof(ldtmod)) == -1)
+ 	    unix_abort();
  }
+     Printf("Wrote %d shadow LDT entries\n", i / 8);
  }
  
  void LuserGetGlobalDescriptorTable(void *gdtSt)
***************
*** 296,302 ****
      struct LuserCPUData CPU;
      ReadLuserCPUData(&CPU);
      if (!LookupGDT(&CPU, &result, ldtSelector))
      	return;
      CPU.LuserLdtSel = ldtSelector;
      CPU.LuserLdt.Limit = result.SegLimit;
      CPU.LuserLdt.Base = result.SegBase;
--- 216,225 ----
      struct LuserCPUData CPU;
      ReadLuserCPUData(&CPU);
      if (!LookupGDT(&CPU, &result, ldtSelector))
+     {
+     	Printf("LDT Set Failed\n");
      	return;
+     }
      CPU.LuserLdtSel = ldtSelector;
      CPU.LuserLdt.Limit = result.SegLimit;
      CPU.LuserLdt.Base = result.SegBase;
***************
*** 325,334 ****
      memcpy(idtSt, &CPU.LuserIdt.Limit, sizeof(USHORT) + sizeof(ULONG));
  }
  
  void LuserInvalidatePage(void *addr)
  {
-     ULONG_PTR ptr = (ULONG_PTR)addr;
-     unix_munmap((void *)PAGE_ROUND_DOWN(ptr), PAGE_SIZE);
  }
  
  void LuserWrmsr(unsigned long Msr, unsigned long ValHi, unsigned long ValLo)
--- 248,294 ----
      memcpy(idtSt, &CPU.LuserIdt.Limit, sizeof(USHORT) + sizeof(ULONG));
  }
  
+ void LuserRefreshFS()
+ {
+     int i = 0x3f;
+     struct LuserCPUData CPU;
+     struct modify_ldt_ldt_s ldtmod;
+     KGDTENTRY *gdtent;
+ 
+     ReadLuserCPUData(&CPU);
+     gdtent = (KGDTENTRY *)(CPU.LuserGdt.Base + (i & ~7));
+     // Fill in ldt entry
+     ldtmod.entry_number = i / 8;
+     ldtmod.base_addr = gdtent->BaseLow | (gdtent->HighWord.Bytes.BaseMid << 16) | (gdtent->HighWord.Bytes.BaseHi << 24);
+     ldtmod.limit = gdtent->LimitLow | (gdtent->HighWord.Bits.LimitHi << 16);
+     ldtmod.limit_in_pages = gdtent->HighWord.Bits.Granularity;
+     ldtmod.contents = 0;
+     ldtmod.seg_32bit = gdtent->HighWord.Bits.Default_Big;
+     ldtmod.seg_not_present = !gdtent->HighWord.Bits.Pres;
+     ldtmod.useable = !ldtmod.seg_not_present;
+     ldtmod.read_exec_only = 0;
+     
+     //Printf("LDT: [%x] -> %x:%x\n", ldtmod.entry_number, ldtmod.base_addr, ldtmod.limit * (ldtmod.limit_in_pages ? (1<<PAGE_SHIFT) : 1));
+ 
+     if (unix_write_ldt(&ldtmod, sizeof(ldtmod)) == -1)
+         unix_abort();    
+ }
+ 
+ void MapDump();
+ int  ReplacePage(ULONG_PTR ptr, ULONG_PTR from);
+ HARDWARE_PTE MapGetPTEWithRefresh(ULONG_PTR Addr);
+ 
  void LuserInvalidatePage(void *addr)
  {
+ #if 0
+     ULONG_PTR ptr = PAGE_ROUND_DOWN((ULONG_PTR)addr);
+     Printf("invlpg %x\n", addr);
+     MapGetPTEWithRefresh(ptr);
+     unix_msync((void *)ptr, PAGE_SIZE, MS_SYNC);
+     unix_munmap((void *)ptr, PAGE_SIZE);
+     ReplacePage(ptr, (ULONG_PTR)__builtin_return_address(0));
+ #endif
+     //MapDump();
  }
  
  void LuserWrmsr(unsigned long Msr, unsigned long ValHi, unsigned long ValLo)
***************
*** 358,368 ****
      _memcpy(IdtEntry, LocalEntry, sizeof(*LocalEntry));
  }
  
- void LuserGetTSS(void *Tss)
  {
      struct GDTLookupResult result;
      struct LuserCPUData CPU;
      ReadLuserCPUData(&CPU);
      if (LookupGDT(&CPU, &result, CPU.LuserTr))
          _memcpy(Tss, (void *)result.SegBase, sizeof(KTSS));
  }
--- 318,330 ----
      _memcpy(IdtEntry, LocalEntry, sizeof(*LocalEntry));
  }
  
+ int LuserGetTSS(void *Tss)
  {
      struct GDTLookupResult result;
      struct LuserCPUData CPU;
      ReadLuserCPUData(&CPU);
+     if (!CPU.LuserTr) return 0;
      if (LookupGDT(&CPU, &result, CPU.LuserTr))
          _memcpy(Tss, (void *)result.SegBase, sizeof(KTSS));
+     return 1;
  }

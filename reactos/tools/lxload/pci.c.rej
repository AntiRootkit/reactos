***************
*** 0 ****
--- 1,275 ----
+ #include <stdio.h>
+ #include <assert.h>
+ #include <stdlib.h>
+ #include <string.h>
+ #include "luserhw.h"
+ 
+ union pci_config
+ {
+     unsigned char space[256];
+     unsigned long wspace[64];
+     struct pci_config_reg {
+         unsigned short device_id, vendor_id;
+         unsigned short status, command;
+         unsigned long class_revision;
+         unsigned char bist, header_type, latency_timer, cache_line;
+         unsigned long bar[6];
+         unsigned long cardbus_cis;
+         unsigned short subsystem_id, system_vendor_id;
+         unsigned long expansion_rom;
+         unsigned char reserved[3], capabilities;
+         unsigned long reserved2;
+         unsigned char max_lat, min_gnt, int_pin, int_line;
+     } __attribute__((packed)) pci_registers;
+ };
+ 
+ struct pci_dev
+ {
+     union pci_config function[8];
+ };
+ 
+ struct pci_data 
+ {
+     struct pci_dev device[32];
+     unsigned long addr;
+ } pci_data = {
+     { // device[0]
+         { // 0000:00:00.0 Host bridge: Intel Corp. 82845 845 (Brookdale) Chipset Host Bridge (rev 03)
+             { // function[0]
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x30, 0x1a, 0x06, 0x01, 0x90, 0x20,
+                         /*   */ 0x03, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
+                         /*10:*/ 0x08, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0x0e, 0x01,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                     }
+                 },
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x31, 0x1a, 0x07, 0x01, 0xa0, 0x00,
+                         /*   */ 0x03, 0x00, 0x04, 0x06, 0x00, 0x40, 0x01, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x01, 0x01, 0x40, 0xe0, 0xe0, 0xa0, 0x22,
+                         /*20:*/ 0x80, 0xff, 0x90, 0xff, 0x00, 0xf8, 0xf0, 0xfb,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:00:1e.0 PCI bridge: Intel Corp. 82801BA/CA/DB/EB/ER Hub interface to PCI Bridge (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x80, 0x00,
+                         /*   */ 0x12, 0x00, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x02, 0x02, 0x40, 0xd0, 0xd0, 0x80, 0x22,
+                         /*20:*/ 0x60, 0xff, 0x70, 0xff, 0xf0, 0xff, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:00:1f.0 ISA bridge: Intel Corp. 82801BA ISA Bridge (LPC) (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x40, 0x24, 0x0f, 0x00, 0x80, 0x02,
+                         /*   */ 0x12, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:00:1f.1 IDE interface: Intel Corp. 82801BA IDE U100 (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x4b, 0x24, 0x05, 0x00, 0x80, 0x02,
+                         /*   */ 0x12, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0xa1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0x0e, 0x01,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:00:1f.2 USB Controller: Intel Corp. 82801BA/BAM USB (Hub #1) (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x42, 0x24, 0x05, 0x00, 0x80, 0x02,
+                         /*   */ 0x12, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x81, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0x0e, 0x01,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x0b, 0x04, 0x00, 0x00
+                     }
+                 }
+             }
+         },
+ #if 0
+         { // 0000:00:1f.3 SMBus: Intel Corp. 82801BA/BAM SMBus (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x43, 0x24, 0x01, 0x00, 0x80, 0x02,
+                         /*   */ 0x12, 0x00, 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0xd1, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0x0e, 0x01,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00
+                     }
+                 }
+             }
+         },
+ #endif
+         { // 0000:00:1f.4 USB Controller: Intel Corp. 82801BA/BAM USB (Hub #2) (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x44, 0x24, 0x05, 0x00, 0x80, 0x02,
+                         /*   */ 0x12, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00,
+                         /*10:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x61, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0x0e, 0x01,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:00:1f.5 Multimedia audio controller: Intel Corp. 82801BA/BAM AC'97 Audio (rev 12)
+             {
+                 {
+                     {
+                         /*00:*/ 0x86, 0x80, 0x45, 0x24, 0x05, 0x00, 0x80, 0x02,
+                         /*   */ 0x12, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00,
+                         /*10:*/ 0x01, 0xc8, 0x00, 0x00, 0x41, 0xcc, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0x0e, 0x01,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:01:00.0 VGA compatible controller: ATI Technologies Inc Rage 128 Pro Ultra TF
+             {
+                 {
+                     {
+                         /*00:*/ 0x02, 0x10, 0x46, 0x54, 0x83, 0x00, 0xb0, 0x02,
+                         /*   */ 0x00, 0x00, 0x00, 0x03, 0x10, 0x40, 0x00, 0x00,
+                         /*10:*/ 0x08, 0x00, 0x00, 0xf8, 0x01, 0xec, 0x00, 0x00,
+                         /*   */ 0x00, 0xc0, 0x8f, 0xff, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x08, 0x04,
+                         /*30:*/ 0x00, 0x00, 0x00, 0x80, 0x50, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00
+                     }
+                 }
+             }
+         },
+         { // 0000:02:0c.0 Ethernet controller: 3Com Corporation 3c905C-TX/TX-M [Tornado] (rev 78)
+             {
+                 {
+                     {
+                         /*00:*/ 0xb7, 0x10, 0x00, 0x92, 0x17, 0x01, 0x10, 0x02,
+                         /*   */ 0x78, 0x00, 0x00, 0x02, 0x10, 0x40, 0x00, 0x00,
+                         /*10:*/ 0x81, 0xdc, 0x00, 0x00, 0x00, 0xfc, 0x6f, 0xff,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*20:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x10, 0xfe, 0x00,
+                         /*30:*/ 0x00, 0x00, 0x70, 0xff, 0xdc, 0x00, 0x00, 0x00,
+                         /*   */ 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x0a, 0x0a
+                     }
+                 }
+             }
+         }
+     }
+ };
+ 
+ int pciReadByte(struct dev_t *dev, int addr)
+ {
+     int result = pciReadWord(dev, addr & ~1);
+     result >>= (addr & 1) << 3;
+     return result & 0xff;
+ }
+ 
+ int pciReadWord(struct dev_t *dev, int addr)
+ {
+     int result = pciReadDword(dev, addr & ~3);
+     result >>= (addr & 2) << 3;
+     return result & 0xffff;
+ }
+ 
+ int pciReadDword(struct dev_t *dev, int addr)
+ {
+     struct pci_data *pcibus = dev->self;
+     int bus = (pcibus->addr >> 16) & 0xff;
+     int devn = (pcibus->addr >> 11) & 0x1f;
+     int func = (pcibus->addr >> 8) & 7;
+     int reg = pcibus->addr & 0xff;
+     int result;
+     
+     if (bus > 0) return -1;
+     memcpy
+         (&result, 
+          &pcibus->device[devn].function[func].space[reg], 
+          sizeof(int));
+     fprintf
+         (stderr, "PCI: read (dev=%02x func=%x reg=%02x) -> %08x\n", 
+          devn, func, reg, result);
+     return result;
+ }
+ 
+ void pciWriteByte(struct dev_t *dev, int addr, int val)
+ {
+     int orig = pciReadWord(dev, addr);
+     if (addr & 1)
+         orig = (orig & ~0xff) | (val & 0xff);
+     else
+         orig = (val & ~0xff) | (orig & 0xff);
+     pciWriteWord(dev, addr, orig);
+ }
+ 
+ void pciWriteWord(struct dev_t *dev, int addr, int val)
+ {
+     int orig = pciReadDword(dev, addr);
+     if (addr & 2)
+         orig = (orig & ~0xffff) | (val & 0xffff);
+     else
+         orig = (val & ~0xffff) | (orig & 0xffff);
+     pciWriteDword(dev, addr, orig);
+ }
+ 
+ void pciWriteDword(struct dev_t *dev, int addr, int val)
+ {
+     struct pci_data *pcibus = dev->self;
+     if (!addr)
+         pcibus->addr = val;
+     else
+         fprintf(stderr, "PCI: write %x <- %x\n", addr, val);
+ }
